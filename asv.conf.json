{
    "version": 1,
    "project": "shutterbug",
    // "project_url": "http://project-homepage.org/",
    "repo": ".",
    "dvcs": "git",
    "repo_subdir": "",
    // Customizable commands for building, installing, and
    // uninstalling the project. See asv.conf.json documentation.
    //
    "install_command": [
        "in-dir={env_dir} python -mpip install {wheel_file}"
    ],
    "uninstall_command": [
        "return-code=any python -mpip uninstall -y {project}"
    ],
    "build_command": [
        "pip install poetry",
        "poetry build -f wheel",
        "PIP_NO_BUILD_ISOLATION=false python -mpip wheel --no-deps --no-index -w {build_cache_dir} {build_dir}"
    ],
    "branches": [
        "HEAD"
    ],
    "environment_type": "virtualenv",
    "env_dir": ".asv/env",
    "results_dir": ".asv/results",
    "html_dir": ".asv/html",
    // "pythons": "3.9",
    // "include": [
    //     {
    //         "python": "3.9",
    //         "poetry": "1.1.7"
    //     }
    // ]
    // The number of characters to retain in the commit hashes.
    // "hash_length": 8,
    // `asv` will cache results of the recent builds in each
    // environment, making them faster to install next time.  This is
    // the number of builds to keep, per environment.
    // "build_cache_size": 2,
    // The commits after which the regression search in `asv publish`
    // should start looking for regressions. Dictionary whose keys are
    // regexps matching to benchmark names, and values corresponding to
    // the commit (exclusive) after which to start looking for
    // regressions.  The default is to start from the first commit
    // with results. If the commit is `null`, regression detection is
    // skipped for the matching benchmark.
    //
    // "regressions_first_commits": {
    //    "some_benchmark": "352cdf",  // Consider regressions only after this commit
    //    "another_benchmark": null,   // Skip regression detection altogether
    // },
    // The thresholds for relative change in results, after which `asv
    // publish` starts reporting regressions. Dictionary of the same
    // form as in ``regressions_first_commits``, with values
    // indicating the thresholds.  If multiple entries match, the
    // maximum is taken. If no entry matches, the default is 5%.
    //
    // "regressions_thresholds": {
    //    "some_benchmark": 0.01,     // Threshold of 1%
    //    "another_benchmark": 0.5,   // Threshold of 50%
    // },
}